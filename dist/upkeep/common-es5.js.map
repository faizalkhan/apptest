{"version":3,"sources":["webpack:///src/utils/formValidators.ts"],"names":["fileListFileTypeValidator","mimeTypesOrFileExtensions","control","files","value","getFileExtension","x","split","pop","isAcceptable","file","extension","name","includes","type","Array","from","every","acceptableFileType","fileListFileSizesValidator","maxSizeBytes","size","acceptableFileSize","fileListNumberOfFilesValidator","maxNumberOfFiles","length","acceptableNumberOfFiles","minSelectedCheckboxes","min","validator","formArray","totalSelected","controls","map","reduce","prev","next","required"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { FormControl, ValidatorFn, FormArray } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\n\r\nexport function fileListFileTypeValidator(mimeTypesOrFileExtensions: string[]) {\r\n  return function(control: FormControl) {\r\n    const files: FileList = control.value;\r\n    if (files) {\r\n      const getFileExtension = (x: string) => x.split('.').pop();\r\n      const isAcceptable = (file: File) => {\r\n        let extension = '';\r\n        if (file.name) {\r\n          extension = getFileExtension(file.name);\r\n        }\r\n        return (\r\n          (mimeTypesOrFileExtensions.includes(file.type) &&    mimeTypesOrFileExtensions.includes(extension)) ||\r\n          mimeTypesOrFileExtensions.includes(extension)\r\n        );\r\n      };\r\n      if (!Array.from(files).every(isAcceptable)) {\r\n        return {\r\n          acceptableFileType: true\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nexport function fileListFileSizesValidator(maxSizeBytes: number) {\r\n  return function(control: FormControl) {\r\n    const files: FileList = control.value;\r\n    if (files) {\r\n      const isAcceptable = (file: File) => file.size < maxSizeBytes;\r\n      if (!Array.from(files).every(isAcceptable)) {\r\n        return {\r\n          acceptableFileSize: true\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nexport function fileListNumberOfFilesValidator(maxNumberOfFiles: number) {\r\n  return function(control: FormControl) {\r\n    const files: FileList = control.value;\r\n    if (files) {\r\n      if (files.length > maxNumberOfFiles) {\r\n        return of({\r\n          acceptableNumberOfFiles: true\r\n        });\r\n      }\r\n      return of(null);\r\n    }\r\n    return of(null);\r\n  };\r\n}\r\n\r\nexport function minSelectedCheckboxes(min = 1) {\r\n  const validator: ValidatorFn = (formArray: FormArray) => {\r\n    const totalSelected = formArray.controls\r\n\r\n      .map(control => control.value)\r\n\r\n      .reduce((prev, next) => next ? prev + next : prev, 0);\r\n\r\n\r\n    return totalSelected >= min ? null : { required: true };\r\n  };\r\n\r\n  return validator;\r\n}\r\n"]}